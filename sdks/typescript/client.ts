/**
 * This file is auto-generated by tools/oas2ts.ts.
 * Thin client helpers for the LokanOS API bundle.
 */

import type { DiagnosticInfo, HealthStatus } from './types.js';
export type { DiagnosticInfo, HealthStatus } from './types.js';

export interface RequestOptions {
  /** Base URL for the LokanOS API (e.g. https://api.example.com). */
  baseUrl?: string;
  /** Additional headers to apply to the request. */
  headers?: Record<string, string>;
  /** Optional body payload for the request. */
  body?: unknown;
  /** Custom fetch implementation, defaults to globalThis.fetch. */
  fetch?: typeof fetch;
}

function joinUrl(baseUrl: string | undefined, apiPath: string): string {
  if (!baseUrl) {
    return apiPath;
  }
  if (/^https?:/i.test(apiPath)) {
    return apiPath;
  }
  const normalizedBase = baseUrl.replace(/[/]+$/, '');
  const normalizedPath = apiPath.startsWith('/') ? apiPath : `/${apiPath}`;
  return `${normalizedBase}${normalizedPath}`;
}

function hasHeader(headers: Record<string, string>, name: string): boolean {
  const lower = name.toLowerCase();
  return Object.keys(headers).some((key) => key.toLowerCase() === lower);
}

function shouldSerializeJson(body: unknown): boolean {
  if (body === null || body === undefined) {
    return false;
  }
  if (typeof body === 'string') {
    return false;
  }
  if (typeof ArrayBuffer !== 'undefined' && (body instanceof ArrayBuffer || ArrayBuffer.isView(body))) {
    return false;
  }
  if (typeof Blob !== 'undefined' && body instanceof Blob) {
    return false;
  }
  if (typeof FormData !== 'undefined' && body instanceof FormData) {
    return false;
  }
  return typeof body === 'object';
}

export async function request(path: string, method: string, options: RequestOptions = {}): Promise<Response> {
  const { baseUrl, headers = {}, body, fetch: customFetch } = options;
  const fetchImpl = customFetch || globalThis.fetch;
  if (!fetchImpl) {
    throw new Error('Fetch API is not available in this environment.');
  }
  const url = joinUrl(baseUrl, path);
  const finalHeaders: Record<string, string> = { ...headers };
  let finalBody: BodyInit | undefined;
  if (body !== undefined) {
    if (shouldSerializeJson(body)) {
      if (!hasHeader(finalHeaders, 'content-type')) {
        finalHeaders['Content-Type'] = 'application/json';
      }
      finalBody = JSON.stringify(body);
    } else {
      finalBody = body as BodyInit;
    }
  }
  return fetchImpl(url, { method, headers: finalHeaders, body: finalBody });
}

export type ApiGatewayDiagnosticsResponse = DiagnosticInfo;

export async function apiGatewayDiagnostics(options: RequestOptions = {}): Promise<ApiGatewayDiagnosticsResponse> {
  const response = await request('/api-gateway/diag', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as ApiGatewayDiagnosticsResponse;
}

export type ApiGatewayHealthResponse = HealthStatus;

export async function apiGatewayHealth(options: RequestOptions = {}): Promise<ApiGatewayHealthResponse> {
  const response = await request('/api-gateway/health', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as ApiGatewayHealthResponse;
}

export type ApiGatewayMetricsResponse = string;

export async function apiGatewayMetrics(options: RequestOptions = {}): Promise<ApiGatewayMetricsResponse> {
  const response = await request('/api-gateway/metrics', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.text();
  return data as ApiGatewayMetricsResponse;
}

export type ApiGatewayListRoutesResponse = {
  routes: string[];
};

export async function apiGatewayListRoutes(options: RequestOptions = {}): Promise<ApiGatewayListRoutesResponse> {
  const response = await request('/api-gateway/routes', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as ApiGatewayListRoutesResponse;
}

export type AuditLogDiagnosticsResponse = DiagnosticInfo;

export async function auditLogDiagnostics(options: RequestOptions = {}): Promise<AuditLogDiagnosticsResponse> {
  const response = await request('/audit-log/diag', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as AuditLogDiagnosticsResponse;
}

export type AuditLogListEntriesResponse = {
  entries: {
      [key: string]: unknown;
    }[];
};

export async function auditLogListEntries(options: RequestOptions = {}): Promise<AuditLogListEntriesResponse> {
  const response = await request('/audit-log/entries', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as AuditLogListEntriesResponse;
}

export type AuditLogHealthResponse = HealthStatus;

export async function auditLogHealth(options: RequestOptions = {}): Promise<AuditLogHealthResponse> {
  const response = await request('/audit-log/health', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as AuditLogHealthResponse;
}

export type AuditLogMetricsResponse = string;

export async function auditLogMetrics(options: RequestOptions = {}): Promise<AuditLogMetricsResponse> {
  const response = await request('/audit-log/metrics', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.text();
  return data as AuditLogMetricsResponse;
}

export type DeviceRegistryListDevicesResponse = {
  devices: {
      [key: string]: unknown;
    }[];
};

export async function deviceRegistryListDevices(options: RequestOptions = {}): Promise<DeviceRegistryListDevicesResponse> {
  const response = await request('/device-registry/devices', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as DeviceRegistryListDevicesResponse;
}

export type DeviceRegistryDiagnosticsResponse = DiagnosticInfo;

export async function deviceRegistryDiagnostics(options: RequestOptions = {}): Promise<DeviceRegistryDiagnosticsResponse> {
  const response = await request('/device-registry/diag', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as DeviceRegistryDiagnosticsResponse;
}

export type DeviceRegistryHealthResponse = HealthStatus;

export async function deviceRegistryHealth(options: RequestOptions = {}): Promise<DeviceRegistryHealthResponse> {
  const response = await request('/device-registry/health', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as DeviceRegistryHealthResponse;
}

export type DeviceRegistryMetricsResponse = string;

export async function deviceRegistryMetrics(options: RequestOptions = {}): Promise<DeviceRegistryMetricsResponse> {
  const response = await request('/device-registry/metrics', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.text();
  return data as DeviceRegistryMetricsResponse;
}

export type EnergyServiceDiagnosticsResponse = DiagnosticInfo;

export async function energyServiceDiagnostics(options: RequestOptions = {}): Promise<EnergyServiceDiagnosticsResponse> {
  const response = await request('/energy-svc/diag', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as EnergyServiceDiagnosticsResponse;
}

export type EnergyServiceGetReportResponse = {
  consumptionKwh: number;
  period: string;
};

export async function energyServiceGetReport(options: RequestOptions = {}): Promise<EnergyServiceGetReportResponse> {
  const response = await request('/energy-svc/energy-report', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as EnergyServiceGetReportResponse;
}

export type EnergyServiceHealthResponse = HealthStatus;

export async function energyServiceHealth(options: RequestOptions = {}): Promise<EnergyServiceHealthResponse> {
  const response = await request('/energy-svc/health', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as EnergyServiceHealthResponse;
}

export type EnergyServiceMetricsResponse = string;

export async function energyServiceMetrics(options: RequestOptions = {}): Promise<EnergyServiceMetricsResponse> {
  const response = await request('/energy-svc/metrics', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.text();
  return data as EnergyServiceMetricsResponse;
}

export type PresenceServiceDiagnosticsResponse = DiagnosticInfo;

export async function presenceServiceDiagnostics(options: RequestOptions = {}): Promise<PresenceServiceDiagnosticsResponse> {
  const response = await request('/presence-svc/diag', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as PresenceServiceDiagnosticsResponse;
}

export type PresenceServiceHealthResponse = HealthStatus;

export async function presenceServiceHealth(options: RequestOptions = {}): Promise<PresenceServiceHealthResponse> {
  const response = await request('/presence-svc/health', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as PresenceServiceHealthResponse;
}

export type PresenceServiceMetricsResponse = string;

export async function presenceServiceMetrics(options: RequestOptions = {}): Promise<PresenceServiceMetricsResponse> {
  const response = await request('/presence-svc/metrics', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.text();
  return data as PresenceServiceMetricsResponse;
}

export type PresenceServiceGetPresenceResponse = {
  zones: {
      [key: string]: unknown;
    }[];
};

export async function presenceServiceGetPresence(options: RequestOptions = {}): Promise<PresenceServiceGetPresenceResponse> {
  const response = await request('/presence-svc/presence', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as PresenceServiceGetPresenceResponse;
}

export type RadioCoordinatorListChannelsResponse = {
  assignments: {
      [key: string]: unknown;
    }[];
};

export async function radioCoordinatorListChannels(options: RequestOptions = {}): Promise<RadioCoordinatorListChannelsResponse> {
  const response = await request('/radio-coord/channels', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as RadioCoordinatorListChannelsResponse;
}

export type RadioCoordinatorDiagnosticsResponse = DiagnosticInfo;

export async function radioCoordinatorDiagnostics(options: RequestOptions = {}): Promise<RadioCoordinatorDiagnosticsResponse> {
  const response = await request('/radio-coord/diag', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as RadioCoordinatorDiagnosticsResponse;
}

export type RadioCoordinatorHealthResponse = HealthStatus;

export async function radioCoordinatorHealth(options: RequestOptions = {}): Promise<RadioCoordinatorHealthResponse> {
  const response = await request('/radio-coord/health', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as RadioCoordinatorHealthResponse;
}

export type RadioCoordinatorMetricsResponse = string;

export async function radioCoordinatorMetrics(options: RequestOptions = {}): Promise<RadioCoordinatorMetricsResponse> {
  const response = await request('/radio-coord/metrics', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.text();
  return data as RadioCoordinatorMetricsResponse;
}

export type RuleEngineDiagnosticsResponse = DiagnosticInfo;

export async function ruleEngineDiagnostics(options: RequestOptions = {}): Promise<RuleEngineDiagnosticsResponse> {
  const response = await request('/rule-engine/diag', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as RuleEngineDiagnosticsResponse;
}

export type RuleEngineHealthResponse = HealthStatus;

export async function ruleEngineHealth(options: RequestOptions = {}): Promise<RuleEngineHealthResponse> {
  const response = await request('/rule-engine/health', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as RuleEngineHealthResponse;
}

export type RuleEngineMetricsResponse = string;

export async function ruleEngineMetrics(options: RequestOptions = {}): Promise<RuleEngineMetricsResponse> {
  const response = await request('/rule-engine/metrics', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.text();
  return data as RuleEngineMetricsResponse;
}

export type RuleEngineListRulesResponse = {
  rules: {
      [key: string]: unknown;
    }[];
};

export async function ruleEngineListRules(options: RequestOptions = {}): Promise<RuleEngineListRulesResponse> {
  const response = await request('/rule-engine/rules', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as RuleEngineListRulesResponse;
}

export type SceneServiceDiagnosticsResponse = DiagnosticInfo;

export async function sceneServiceDiagnostics(options: RequestOptions = {}): Promise<SceneServiceDiagnosticsResponse> {
  const response = await request('/scene-svc/diag', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as SceneServiceDiagnosticsResponse;
}

export type SceneServiceHealthResponse = HealthStatus;

export async function sceneServiceHealth(options: RequestOptions = {}): Promise<SceneServiceHealthResponse> {
  const response = await request('/scene-svc/health', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as SceneServiceHealthResponse;
}

export type SceneServiceMetricsResponse = string;

export async function sceneServiceMetrics(options: RequestOptions = {}): Promise<SceneServiceMetricsResponse> {
  const response = await request('/scene-svc/metrics', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.text();
  return data as SceneServiceMetricsResponse;
}

export type SceneServiceListScenesResponse = {
  scenes: {
      [key: string]: unknown;
    }[];
};

export async function sceneServiceListScenes(options: RequestOptions = {}): Promise<SceneServiceListScenesResponse> {
  const response = await request('/scene-svc/scenes', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as SceneServiceListScenesResponse;
}

export type TelemetryPipeDiagnosticsResponse = DiagnosticInfo;

export async function telemetryPipeDiagnostics(options: RequestOptions = {}): Promise<TelemetryPipeDiagnosticsResponse> {
  const response = await request('/telemetry-pipe/diag', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as TelemetryPipeDiagnosticsResponse;
}

export type TelemetryPipeHealthResponse = HealthStatus;

export async function telemetryPipeHealth(options: RequestOptions = {}): Promise<TelemetryPipeHealthResponse> {
  const response = await request('/telemetry-pipe/health', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as TelemetryPipeHealthResponse;
}

export type TelemetryPipeIngestRequest = {
  payload: {
    [key: string]: unknown;
  };
  source: string;
};

export type TelemetryPipeIngestResponse = void;

export async function telemetryPipeIngest(body: TelemetryPipeIngestRequest, options: RequestOptions = {}): Promise<TelemetryPipeIngestResponse> {
  const response = await request('/telemetry-pipe/ingest', 'POST', { ...options, body });
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  return undefined as TelemetryPipeIngestResponse;
}

export type TelemetryPipeMetricsResponse = string;

export async function telemetryPipeMetrics(options: RequestOptions = {}): Promise<TelemetryPipeMetricsResponse> {
  const response = await request('/telemetry-pipe/metrics', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.text();
  return data as TelemetryPipeMetricsResponse;
}

export type UpdaterServiceAvailableResponse = {
  updates: {
      [key: string]: unknown;
    }[];
};

export async function updaterServiceAvailable(options: RequestOptions = {}): Promise<UpdaterServiceAvailableResponse> {
  const response = await request('/updater/available', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as UpdaterServiceAvailableResponse;
}

export type UpdaterServiceDiagnosticsResponse = DiagnosticInfo;

export async function updaterServiceDiagnostics(options: RequestOptions = {}): Promise<UpdaterServiceDiagnosticsResponse> {
  const response = await request('/updater/diag', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as UpdaterServiceDiagnosticsResponse;
}

export type UpdaterServiceHealthResponse = HealthStatus;

export async function updaterServiceHealth(options: RequestOptions = {}): Promise<UpdaterServiceHealthResponse> {
  const response = await request('/updater/health', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data as UpdaterServiceHealthResponse;
}

export type UpdaterServiceMetricsResponse = string;

export async function updaterServiceMetrics(options: RequestOptions = {}): Promise<UpdaterServiceMetricsResponse> {
  const response = await request('/updater/metrics', 'GET', options);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.text();
  return data as UpdaterServiceMetricsResponse;
}
